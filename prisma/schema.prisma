datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tweets        Tweet[]
  comments      Comment[]
  likes         Like[]
  
  // Followers / Following relations (self-relation)
  followers     Follower[] @relation("UserFollowers")
  following     Follower[] @relation("UserFollowing")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Tweet {
  id          String    @id @default(cuid())
  content     String    @db.Text
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  authorId    String
  tweetId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tweet       Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)
}

model Like {
  id          String    @id @default(cuid())
  userId      String
  tweetId     String
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet       Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@unique([userId, tweetId]) // un user ne peut liker un tweet qu'une fois
}

model Follower {
  id            String    @id @default(cuid())
  followerId    String
  followingId   String
  createdAt     DateTime  @default(now())

  follower      User      @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following     User      @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ã©viter doublons follow
}